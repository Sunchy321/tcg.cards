/// This file comes from https://mtgjson.com/types/AllMTGJSONTypes.ts
/// Further update may be required.

export type BoosterConfig = {
    boosters:            BoosterPack[];
    boostersTotalWeight: number;
    sheets:              Record<string, BoosterSheet>;
    name?:               string; // Undocumented field
};
export type BoosterPack = {
    contents: Record<string, number>;
    weight:   number;
};
export type BoosterSheet = {
    allowDuplicates: boolean;
    balanceColors:   boolean;
    cards:           Record<string, number>;
    foil:            boolean;
    fixed:           boolean;
    totalWeight:     number;
};
export type CardAtomic = {
    asciiName?:               string;
    attractionLights?:        string[];
    colorIdentity:            string[];
    colorIndicator?:          string[];
    colors:                   string[];
    convertedManaCost:        number;
    defense?:                 string;
    edhrecRank?:              number;
    edhrecSaltiness?:         number;
    faceConvertedManaCost?:   number;
    faceManaValue?:           number;
    faceName?:                string;
    firstPrinting?:           string;
    foreignData?:             ForeignData[];
    hand?:                    string;
    hasAlternativeDeckLimit?: boolean;
    identifiers:              Identifiers;
    isFunny?:                 boolean;
    isReserved?:              boolean;
    keywords?:                string[];
    layout:                   string;
    leadershipSkills?:        LeadershipSkills;
    legalities:               Legalities;
    life?:                    string;
    loyalty?:                 string;
    manaCost?:                string;
    manaValue:                number;
    name:                     string;
    power?:                   string;
    printings?:               string[];
    purchaseUrls:             PurchaseUrls;
    relatedCards:             RelatedCards;
    rulings?:                 Rulings[];
    side?:                    string;
    subsets?:                 string[];
    subtypes:                 string[];
    supertypes:               string[];
    text?:                    string;
    toughness?:               string;
    type:                     string;
    types:                    string[];
};
export type CardDeck = {
    artist?:                  string;
    artistIds?:               string[];
    asciiName?:               string;
    attractionLights?:        string[];
    availability:             string[];
    boosterTypes?:            string[];
    borderColor:              string;
    cardParts?:               string[];
    colorIdentity:            string[];
    colorIndicator?:          string[];
    colors:                   string[];
    convertedManaCost:        number;
    count:                    number;
    defense?:                 string;
    duelDeck?:                string;
    edhrecRank?:              number;
    edhrecSaltiness?:         number;
    faceConvertedManaCost?:   number;
    faceFlavorName?:          string;
    faceManaValue?:           number;
    faceName?:                string;
    finishes:                 string[];
    flavorName?:              string;
    flavorText?:              string;
    foreignData?:             ForeignData[];
    frameEffects?:            string[];
    frameVersion:             string;
    hand?:                    string;
    hasAlternativeDeckLimit?: boolean;
    hasContentWarning?:       boolean;
    hasFoil:                  boolean;
    hasNonFoil:               boolean;
    identifiers:              Identifiers;
    isAlternative?:           boolean;
    isFoil:                   boolean;
    isFullArt?:               boolean;
    isFunny?:                 boolean;
    isOnlineOnly?:            boolean;
    isOversized?:             boolean;
    isPromo?:                 boolean;
    isRebalanced?:            boolean;
    isReprint?:               boolean;
    isReserved?:              boolean;
    isStarter?:               boolean;
    isStorySpotlight?:        boolean;
    isTextless?:              boolean;
    isTimeshifted?:           boolean;
    keywords?:                string[];
    language:                 string;
    layout:                   string;
    leadershipSkills?:        LeadershipSkills;
    legalities:               Legalities;
    life?:                    string;
    loyalty?:                 string;
    manaCost?:                string;
    manaValue:                number;
    name:                     string;
    number:                   string;
    originalPrintings?:       string[];
    originalReleaseDate?:     string;
    originalText?:            string;
    originalType?:            string;
    otherFaceIds?:            string[];
    power?:                   string;
    printings?:               string[];
    promoTypes?:              string[];
    purchaseUrls:             PurchaseUrls;
    rarity:                   string;
    relatedCards:             RelatedCards;
    rebalancedPrintings?:     string[];
    rulings?:                 Rulings[];
    securityStamp?:           string;
    setCode:                  string;
    side?:                    string;
    signature?:               string;
    sourceProducts?:          string[];
    subsets?:                 string[];
    subtypes:                 string[];
    supertypes:               string[];
    text?:                    string;
    toughness?:               string;
    type:                     string;
    types:                    string[];
    uuid:                     string;
    variations?:              string[];
    watermark?:               string;
};
export type CardSet = {
    artist?:                  string;
    artistIds?:               string[];
    asciiName?:               string;
    attractionLights?:        string[];
    availability:             string[];
    boosterTypes?:            string[];
    borderColor:              string;
    cardParts?:               string[];
    colorIdentity:            string[];
    colorIndicator?:          string[];
    colors:                   string[];
    convertedManaCost:        number;
    defense?:                 string;
    duelDeck?:                string;
    edhrecRank?:              number;
    edhrecSaltiness?:         number;
    faceConvertedManaCost?:   number;
    faceFlavorName?:          string;
    faceManaValue?:           number;
    faceName?:                string;
    finishes:                 string[];
    flavorName?:              string;
    flavorText?:              string;
    foreignData?:             ForeignData[];
    frameEffects?:            string[];
    frameVersion:             string;
    hand?:                    string;
    hasAlternativeDeckLimit?: boolean;
    hasContentWarning?:       boolean;
    hasFoil:                  boolean;
    hasNonFoil:               boolean;
    identifiers:              Identifiers;
    isAlternative?:           boolean;
    isFullArt?:               boolean;
    isFunny?:                 boolean;
    isOnlineOnly?:            boolean;
    isOversized?:             boolean;
    isPromo?:                 boolean;
    isRebalanced?:            boolean;
    isReprint?:               boolean;
    isReserved?:              boolean;
    isStarter?:               boolean;
    isStorySpotlight?:        boolean;
    isTextless?:              boolean;
    isTimeshifted?:           boolean;
    keywords?:                string[];
    language:                 string;
    layout:                   string;
    leadershipSkills?:        LeadershipSkills;
    legalities:               Legalities;
    life?:                    string;
    loyalty?:                 string;
    manaCost?:                string;
    manaValue:                number;
    name:                     string;
    number:                   string;
    originalPrintings?:       string[];
    originalReleaseDate?:     string;
    originalText?:            string;
    originalType?:            string;
    otherFaceIds?:            string[];
    power?:                   string;
    printings?:               string[];
    promoTypes?:              string[];
    purchaseUrls:             PurchaseUrls;
    rarity:                   string;
    relatedCards?:            RelatedCards;
    rebalancedPrintings?:     string[];
    rulings?:                 Rulings[];
    securityStamp?:           string;
    setCode:                  string;
    side?:                    string;
    signature?:               string;
    sourceProducts?:          string[];
    subsets?:                 string[];
    subtypes:                 string[];
    supertypes:               string[];
    text?:                    string;
    toughness?:               string;
    type:                     string;
    types:                    string[];
    uuid:                     string;
    variations?:              string[];
    watermark?:               string;
};
export type CardSetDeck = {
    count:  number;
    finish: string;
    uuid:   string;
};
export type CardToken = {
    artist?:         string;
    artistIds?:      string[];
    asciiName?:      string;
    availability:    string[];
    boosterTypes?:   string[];
    borderColor:     string;
    cardParts?:      string[];
    colorIdentity:   string[];
    colorIndicator?: string[];
    colors:          string[];
    faceName?:       string;
    faceFlavorName?: string;
    finishes:        string[];
    flavorText?:     string;
    frameEffects?:   string[];
    frameVersion:    string;
    hasFoil:         boolean;
    hasNonFoil:      boolean;
    identifiers:     Identifiers;
    isFullArt?:      boolean;
    isFunny?:        boolean;
    isOnlineOnly?:   boolean;
    isPromo?:        boolean;
    isReprint?:      boolean;
    isTextless?:     boolean;
    keywords?:       string[];
    language:        string;
    layout:          string;
    loyalty?:        string;
    name:            string;
    number:          string;
    orientation?:    string;
    originalText?:   string;
    originalType?:   string;
    otherFaceIds?:   string[];
    power?:          string;
    promoTypes?:     string[];
    relatedCards?:   RelatedCards;
    reverseRelated?: string[];
    securityStamp?:  string;
    setCode:         string;
    side?:           string;
    signature?:      string;
    sourceProducts?: string[];
    subsets?:        string[];
    subtypes:        string[];
    supertypes:      string[];
    text?:           string;
    toughness?:      string;
    type:            string;
    types:           string[];
    uuid:            string;
    watermark?:      string;
};
export type PriceFormats = {
    mtgo?:  Record<'cardhoarder', PriceList>;
    paper?: Record<'cardkingdom' | 'cardmarket' | 'cardsphere' | 'tcgplayer', PriceList>;
};
export type PriceList = {
    buylist?: PricePoints;
    currency: string;
    retail?:  PricePoints;
};
export type PricePoints = {
    foil?:   Record<string, number>;
    normal?: Record<string, number>;
};
export type SealedProductCard = {
    foil:   boolean;
    name:   string;
    number: string;
    set:    string;
    uuid:   string;
};
export type SealedProductContents = {
    card?:     SealedProductCard[];
    deck?:     SealedProductDeck[];
    other?:    SealedProductOther[];
    pack?:     SealedProductPack[];
    sealed?:   SealedProductSealed[];
    variable?: Record<'configs', SealedProductContents[]>[];
};
export type SealedProductDeck = {
    name: string;
    set:  string;
};
export type SealedProductOther = {
    name: string;
};
export type SealedProductPack = {
    code: string;
    set:  string;
};
export type SealedProductSealed = {
    count: number;
    name:  string;
    set:   string;
    uuid:  string;
};
export type CardType = {
    subTypes:   string[];
    superTypes: string[];
};
export type CardTypes = {
    artifact:     CardType;
    conpsiracy:   CardType;
    creature:     CardType;
    enchantment:  CardType;
    instant:      CardType;
    land:         CardType;
    phenomenon:   CardType;
    plane:        CardType;
    planeswalker: CardType;
    scheme:       CardType;
    sorcery:      CardType;
    tribal:       CardType;
    vanguard:     CardType;
};
export type Deck = {
    code:        string;
    commander?:  CardDeck;
    fileName:    string;
    mainBoard:   CardDeck[];
    name:        string;
    releaseDate: string | null;
    sideBoard:   CardDeck[];
    type:        string;
};
export type DeckList = {
    code:        string;
    fileName:    string;
    name:        string;
    releaseDate: string | null;
    type:        string;
};
export type DeckSet = {
    cards:              CardSetDeck[];
    name:               string;
    sealedProductUuids: string[];
};
export type ForeignData = {
    faceName?:     string;
    flavorText?:   string;
    language:      string;
    multiverseId?: number;
    name:          string;
    text?:         string;
    type?:         string;
};
export type Identifiers = {
    cardKingdomEtchedId?:      string;
    cardKingdomFoilId?:        string;
    cardKingdomId?:            string;
    cardsphereId?:             string;
    mcmId?:                    string;
    mcmMetaId?:                string;
    mtgArenaId?:               string;
    mtgjsonFoilVersionId?:     string;
    mtgjsonNonFoilVersionId?:  string;
    mtgjsonV4Id?:              string;
    mtgoFoilId?:               string;
    mtgoId?:                   string;
    multiverseId?:             string;
    scryfallId?:               string;
    scryfallOracleId?:         string;
    scryfallIllustrationId?:   string;
    tcgplayerProductId?:       string;
    tcgplayerEtchedProductId?: string;
};
export type Keywords = {
    abilityWords:     string[];
    keywordAbilities: string[];
    keywordActions:   string[];
};
export type LeadershipSkills = {
    brawl:       boolean;
    commander:   boolean;
    oathbreaker: boolean;
};
export type Legalities = {
    alchemy?:         string;
    brawl?:           string;
    commander?:       string;
    duel?:            string;
    explorer?:        string;
    future?:          string;
    gladiator?:       string;
    historic?:        string;
    historicbrawl?:   string;
    legacy?:          string;
    modern?:          string;
    oathbreaker?:     string;
    oldschool?:       string;
    pauper?:          string;
    paupercommander?: string;
    penny?:           string;
    pioneer?:         string;
    predh?:           string;
    premodern?:       string;
    standard?:        string;
    vintage?:         string;
};
export type Meta = {
    date:    string;
    version: string;
};
export type PurchaseUrls = {
    cardKingdom?:       string;
    cardKingdomEtched?: string;
    cardKingdomFoil?:   string;
    cardmarket?:        string;
    tcgplayer?:         string;
    tcgplayerEtched?:   string;
};
export type RelatedCards = {
    reverseRelated?: string[];
    spellbook?:      string[];
};
export type Rulings = {
    date: string;
    text: string;
};
export type SealedProduct = {
    cardCount?:   number;
    category?:    string;
    contents?:    SealedProductContents;
    identifiers:  Identifiers;
    name:         string;
    productSize?: number;
    purchaseUrls: PurchaseUrls;
    releaseDate?: string;
    subtype?:     string;
    uuid:         string;
};
export type Set = {
    baseSetSize:       number;
    block?:            string;
    booster?:          Record<string, BoosterConfig>;
    cards:             CardSet[];
    cardsphereSetId?:  number;
    code:              string;
    codeV3?:           string;
    decks:             DeckSet[];
    isForeignOnly?:    boolean;
    isFoilOnly:        boolean;
    isNonFoilOnly?:    boolean;
    isOnlineOnly:      boolean;
    isPaperOnly?:      boolean;
    isPartialPreview?: boolean;
    keyruneCode:       string;
    languages?:        string[];
    mcmId?:            number;
    mcmIdExtras?:      number;
    mcmName?:          string;
    mtgoCode?:         string;
    name:              string;
    parentCode?:       string;
    releaseDate:       string;
    sealedProduct:     SealedProduct[];
    tcgplayerGroupId?: number;
    tokens:            CardToken[];
    tokenSetCode?:     string;
    totalSetSize:      number;
    translations:      Translations;
    type:              string;
};
export type SetList = {
    baseSetSize:       number;
    block?:            string;
    code:              string;
    codeV3?:           string;
    isForeignOnly?:    boolean;
    isFoilOnly:        boolean;
    isNonFoilOnly?:    boolean;
    isOnlineOnly:      boolean;
    isPaperOnly?:      boolean;
    isPartialPreview?: boolean;
    keyruneCode:       string;
    mcmId?:            number;
    mcmIdExtras?:      number;
    mcmName?:          string;
    mtgoCode?:         string;
    name:              string;
    parentCode?:       string;
    releaseDate:       string;
    sealedProduct:     SealedProduct[];
    tcgplayerGroupId?: number;
    totalSetSize:      number;
    translations:      Translations;
    type:              string;
};
export type TcgplayerSkus = {
    condition: string;
    finishes:  string[];
    language:  string;
    printing:  string;
    productId: string;
    skuId:     string;
};
export type Translations = {
    'Ancient Greek'?:       string;
    'Arabic'?:              string;
    'Chinese Simplified'?:  string;
    'Chinese Traditional'?: string;
    'French'?:              string;
    'German'?:              string;
    'Hebrew'?:              string;
    'Italian'?:             string;
    'Japanese'?:            string;
    'Korean'?:              string;
    'Latin'?:               string;
    'Phyrexian'?:           string;
    'Portuguese (Brazil)'?: string;
    'Russian'?:             string;
    'Sanskrit'?:            string;
    'Spanish'?:             string;
};
export type AllPrintingsFile = { meta: Meta, data: Record<string, Set> };
export type AllPricesFile = { meta: Meta, data: Record<string, PriceFormats> };
export type AllPricesTodayFile = { meta: Meta, data: Record<string, PriceFormats> };
export type AllIdentifiersFile = { meta: Meta, data: Record<string, CardSet> };
export type AtomicCardsFile = { meta: Meta, data: Record<string, CardAtomic> };
export type CompiledListFile = { meta: Meta, data: string[] };
export type EnumValues = { meta: Meta, data: Record<string, Record<string, string[]>> };
export type LegacyFile = { meta: Meta, data: Record<string, CardSet> };
export type LegacyAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
export type ModernFile = { meta: Meta, data: Record<string, CardSet> };
export type ModernAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
export type PauperAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
export type PioneerFile = { meta: Meta, data: Record<string, CardSet> };
export type PioneerAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
export type StandardFile = { meta: Meta, data: Record<string, CardSet> };
export type StandardAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
export type VintageFile = { meta: Meta, data: Record<string, CardSet> };
export type VintageAtomicFile = { meta: Meta, data: Record<string, CardAtomic> };
